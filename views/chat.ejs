<!doctype html>
<html>
  <head>
    <title><%= title %></title>
    <style>
      .chat-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      .messages {
        height: 400px;
        border: 1px solid #ccc;
        overflow-y: auto;
        padding: 10px;
        margin-bottom: 20px;
      }
      .message {
        margin-bottom: 10px;
        padding: 5px;
      }
      .message .sender {
        font-weight: bold;
        color: #2196f3;
      }
      .message .time {
        color: #999;
        font-size: 0.8em;
      }
      .active-users {
        float: right;
        width: 200px;
        border: 1px solid #ccc;
        padding: 10px;
      }
      .typing-indicator {
        color: #666;
        font-style: italic;
      }
      .input-container {
        display: flex;
        gap: 10px;
      }
      input[type='text'] {
        flex: 1;
        padding: 8px;
      }
      button {
        padding: 8px 16px;
        background: #2196f3;
        color: white;
        border: none;
        cursor: pointer;
      }
      button:hover {
        background: #1976d2;
      }
    </style>
  </head>
  <body>
    <div class="chat-container">
      <div class="active-users">
        <h3>Active Users</h3>
        <ul id="usersList"></ul>
      </div>
      <div class="messages" id="messages"></div>
      <div class="typing-indicator" id="typingIndicator"></div>
      <div class="input-container">
        <input type="text" id="messageInput" placeholder="Type a message..." />
        <button onclick="sendMessage()">Send</button>
      </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      let username = prompt('Please enter your username:');
      const socket = io('/chat');

      socket.emit('join', username);

      socket.on('userJoined', (data) => {
        appendMessage(`${data.username} joined the chat`, 'system');
      });

      socket.on('userLeft', (data) => {
        appendMessage(`${data.username} left the chat`, 'system');
      });

      socket.on('activeUsers', (users) => {
        const usersList = document.getElementById('usersList');
        usersList.innerHTML = users.map((user) => `<li>${user}</li>`).join('');
      });

      socket.on('newMessage', (message) => {
        appendMessage(`${message.sender}: ${message.content}`, 'message');
      });

      socket.on('userTyping', (data) => {
        const indicator = document.getElementById('typingIndicator');
        if (data.isTyping) {
          indicator.textContent = `${data.username} is typing...`;
        } else {
          indicator.textContent = '';
        }
      });

      let typingTimeout;
      document.getElementById('messageInput').addEventListener('input', (e) => {
        socket.emit('typing', true);
        clearTimeout(typingTimeout);
        typingTimeout = setTimeout(() => socket.emit('typing', false), 1000);
      });

      function sendMessage() {
        const input = document.getElementById('messageInput');
        const message = input.value.trim();
        if (message) {
          socket.emit('chatMessage', message);
          input.value = '';
        }
      }

      function appendMessage(message, type) {
        const messagesDiv = document.getElementById('messages');
        const messageElement = document.createElement('div');
        messageElement.className = type;
        messageElement.textContent = message;
        messagesDiv.appendChild(messageElement);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
      }

      // Handle enter key
      document
        .getElementById('messageInput')
        .addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            sendMessage();
          }
        });
    </script>
  </body>
</html>
